import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


//--------------------------------------------------------------------------------------------------------------------------------------------------------

class Result {
    public static int LinearSearch(int num, List<Integer> arr) {
        int pos_asc = 0;
        for(int i=0; i<arr.size(); i++) {
            if(num == arr.get(i)){
                pos_asc = i+1;
                break;
            }
        }
        return pos_asc;
    }

    public static List<Integer> permutationEquation(List<Integer> p) {
    // Write your code here
    //System.out.println(Result.LinearSearch(3, p));
    ArrayList<Integer> arr = new ArrayList<Integer>();
    int asc_num = 1;
    int soln = 0;
    while (asc_num <= p.size()){
        int result1 = LinearSearch(asc_num, p);
        soln = LinearSearch(result1, p);
        arr.add(soln);
        asc_num++;
    }
    return arr;
    }

}

//--------------------------------------------------------------------------------------------------------------------------------------------------------

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> p = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.permutationEquation(p);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
