// Solution has passed 9 out of 12 test cases.

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'climbingLeaderboard' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY ranked
     *  2. INTEGER_ARRAY player
     */

//--------------------------------------------------------------------------------------------------------------------------------------------------------------

    private static int indexOf(TreeSet<Integer> set, Integer element){
        
        int index = -1;
        
        //if the element exists in the TreeSet
        if(set.contains(element)){
            
            /*
             * The element index will be equal to the
             * size of the headSet for the element
             */
            index = set.headSet(element).size();            
        }
        
        return index;
    }

    public static List<Integer> climbingLeaderboard(List<Integer> ranked, List<Integer> player) {
    // Write your code here
        TreeSet<Integer> treeSet = new TreeSet<Integer>(ranked);
//        ArrayList<Integer> test = new ArrayList<Integer>(treeSet);
        List<Integer> arrSoln = new ArrayList<Integer>();
        int playerIterator = 0;
        while(playerIterator<player.size()) {
            treeSet.add(player.get(playerIterator));
            int element = player.get(playerIterator);
            int index = indexOf(treeSet, element);
            int size = treeSet.size();
            arrSoln.add(size - index);
            playerIterator++;
        }
        return arrSoln;
    }
    
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int rankedCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ranked = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int playerCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> player = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.climbingLeaderboard(ranked, player);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
